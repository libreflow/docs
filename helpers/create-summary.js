import * as fs from "fs";
import * as path from "path";
import { dirname } from "path";
import { fileURLToPath } from "url";
import frontMatter from "front-matter";

const __dirname = dirname(fileURLToPath(import.meta.url));

if (process.argv.length < 3) {
	console.log("Please provide the filepath of the summary.json file");
	process.exit(1);
}

const filePath = process.argv[2];

function capitalizeNouns(str) {
  const noCapitalize = ['a', 'an', 'the', 'and', 'but', 'or', 'for', 'nor', 'on', 'at', 'to', 'from', 'by', 'in', 'out', 'of', 'with'];
  return str.split('-').map((word) => {
    if (noCapitalize.includes(word)) {
      return word;
    } else {
      return word.charAt(0).toUpperCase() + word.slice(1);
    }
  }).join(' ');
}

function readDirDeep(dirPath) {
  const dirTree = {};
  const files = fs.readdirSync(dirPath);

  files.forEach((file) => {
    const filePath = path.join(dirPath, file);
    const fileStat = fs.statSync(filePath);

    if (fileStat.isDirectory()) {
      const dirName = capitalizeNouns(file.replace(/^\d+-/, '')); // remove leading numbers
      dirTree[dirName] = readDirDeep(filePath);
    } else {
			// Check if the file includes a title, then we can just use that instead of the name.
			let frontmatter = frontMatter(fs.readFileSync(filePath, "utf-8"));
			let userAttributedTitle = frontmatter.attributes.title;
			let autoGeneratedTitle = file.replace(/^\d+-/, '');

      
      const fileExt = path.extname(file);
      const nameWithoutExt = path.basename(autoGeneratedTitle, fileExt);
      dirTree[userAttributedTitle] = nameWithoutExt;
    }
  });

  return dirTree;
}

const tree = readDirDeep(path.join(__dirname, "../src/content/docs"));

if (fs.existsSync(filePath)) {
	if (process.argv[3] !== "force") {
		console.log("File already exists, are you sure you want to overwrite? If so, add 'force' as second argument.")
		process.exit();
	}
}

fs.writeFileSync(filePath, JSON.stringify(tree, undefined, 2), "utf-8");